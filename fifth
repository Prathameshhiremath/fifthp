package com.example.fifth;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class FifthApplication {

	public static void main(String[] args) {
		SpringApplication.run(FifthApplication.class, args);
	}

}
package com.example.fifth;

import org.hibernate.validator.constraints.Length;


import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;



public class Product {
	@NotNull(message="id is required")
	@Min(1)
	@Max(100)
	private Long id;
	@NotBlank(message = "Name is required")
	@Length(max=4)
	private String name;
	@Min(1)
	@Max(100)
	@NotNull(message = "Price is required")
	private Double price;
	public Long getId() {
	return id;
	}
	public void setId(Long id) {
	this.id = id;
	}
	public String getName() {
	return name;
	}
	public void setName(String name) {
	this.name = name;
	}
	public Double getPrice() {
	return price;
	}
	public void setPrice(Double price) {
	this.price = price;
	}
}

package com.example.fifth;

import java.util.ArrayList;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/api/products")

public class ProductController {
	private final List<Product> products = new ArrayList<>();
	@PostMapping
	public ResponseEntity<?> addProduct(@Valid @RequestBody Product product,BindingResult result) 
	{
		List<String> displayErrors = new ArrayList<String>();
		if (result.hasErrors()) 
	{
			List<FieldError> errors = result.getFieldErrors();
			for(FieldError err:errors) 
	{
				displayErrors.add(err.getField() + ": " + err.getDefaultMessage());
				System.out.println(displayErrors);
	}
			return ResponseEntity.badRequest().body(displayErrors);
	}
		products.add(product);
		return ResponseEntity.status(HttpStatus.CREATED).body(product);
	}
	@GetMapping
	public List<Product> getProduct(){
	return products;
	}
	
	

}

